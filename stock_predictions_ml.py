# -*- coding: utf-8 -*-
"""Stock Predictions ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yDeqPsnIKAOa1nhpywIumEeMXnHDyqdn
"""

#Dependencies
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

#Load the Data (from barcharts)
from google.colab import files
upload = files.upload()

#store data into dataframe
df = pd.read_csv('NFLX_StockData.csv')
df.head(6)

#get number of training days
df.shape

#visualize close price data
plt.figure(figsize=(16, 8))
plt.title('Netflix')
plt.xlabel('Days')
plt.ylabel('Close Price USD')
plt.plot(df['Last'])
plt.show()

#get close price
df = df[['Last']]
df.head(4)

#create variable to predict 'x' days in the future
future_days = 25
#create new column for target data shifted x days up
df['Prediction'] = df[['Last']].shift(-future_days)
df.tail(4)

#Create feature data set (X) and convert it to a numpy array and remove the last 'x' days
#df.drop function just gets rid of the Prediction column and aids in printing the 'last' column
X = np.array(df.drop(['Prediction'], 1)) [:-future_days]
print(X)

#create target data set (Y) and convert it to numpy array and get all target values except last 'x' days
#target data set is just the Prediction column
Y = np.array(df['Prediction'])[:-future_days]
print(Y)

#split data into 75% training and 25% testing

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25)

#create the models
#create decision tree regressor model
tree = DecisionTreeRegressor().fit(X_train, Y_train)
#create linear regression model
lr = LinearRegression().fit(X_train, Y_train)

#get last 'x' rows of feature data set
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
x_future

#show model tree prediction

tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
#show model linear regression prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#visualize data

predictions = tree_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16, 8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD')
plt.plot(df['Last'])
plt.plot(valid[['Last', 'Predictions']])
plt.legend(['Orig', 'Val', 'Pred'])
plt.show()

#visualize data

predictions = lr_prediction
valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16, 8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price USD')
plt.plot(df['Last'])
plt.plot(valid[['Last', 'Predictions']])
plt.legend(['Orig', 'Val', 'Pred'])
plt.show()